import numpy as np
import matplotlib.pyplot as plt
from timeit import default_timer as timer

WORLD_BIG="""
........................................................................
........................................................................
.......................................#####............................
.......................................#......#.........................
.....................................#...0..............................
......................................##....#.##........................
........................................###...#.........................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
"""

WORLD="""
..........................
..........................
........#####.............
........#......#..........
......#...0...............
.......##....#.##.........
.........###...#..........
..........................
"""

CELL_VALUES = {
    "0": 20,
    "#": 10,
    ".": 0,
}

def bresenham_line(x0, y0, x1, y1):
    dx = x1 - x0
    dy = y1 - y0

    xsign = 1 if dx > 0 else -1
    ysign = 1 if dy > 0 else -1

    dx = abs(dx)
    dy = abs(dy)

    if dx > dy:
        xx, xy, yx, yy = xsign, 0, 0, ysign
    else:
        dx, dy = dy, dx
        xx, xy, yx, yy = 0, ysign, xsign, 0

    D = 2*dy - dx
    y = 0

    for x in range(dx + 1):
        yield x0 + x*xx + y*yx, y0 + x*xy + y*yy
        if D >= 0:
            y += 1
            D -= 2*dx
        D += 2*dy

def string_to_world(strings):
    lines = strings.split('\n')[1:-1]
    max_x, max_y = len(lines), len(lines[0])
    output = np.zeros([max_x, max_y])
    for i in range(len(lines)):
        for j in range(len(lines[0])):
            obj = lines[i][j]
            output[i][j] = CELL_VALUES[obj]
    return output

# Compute bresenham lines on each point of the map and evaluates if an obstacle is between
class Sight_Bresenham():
    def __init__(self, world, is_obstacle_cb):
        self.world = world
        self.max_x = len(world)
        self.max_y = len(world[0])
        self.is_obstacle_cb = is_obstacle_cb

    def is_obstable(self, p):
        num = self.world[p[0]][p[1]]
        return num != CELL_VALUES["#"]

    @staticmethod
    def distance(p1, p2):
        diff_x = abs(p2[0] - p1[0])
        diff_y = abs(p2[1] - p1[1])
        return diff_x + diff_y

    def display(self, sight):
        sight_mask = np.zeros([self.max_x, self.max_y])
        for p in sight:
            sight_mask[p[0]][p[1]] = 4
        plt.imshow(self.world + sight_mask)
        plt.show()

    def compute_sight(self, from_pos, max_range):
        for target in self.get_coordinates_in_range(from_pos, max_range):
            line = list(bresenham_line(from_pos[0], from_pos[1], target[0], target[1]))
            has_obstacle = False
            for pt in line:
                if self.is_obstable(pt):
                    has_obstacle = True
            if not has_obstacle:
                yield target

    def has_sight(self, from_pos, target, max_range):
        if self.distance(from_pos, target) > max_range:
            return False
        line = list(bresenham_line(from_pos[0], from_pos[1], target[0], target[1]))
        has_obstacle = False
        for pt in line:
            if self.is_obstable(pt):
                has_obstacle = True
        return not has_obstacle

    def fit(self, pos):
        return pos[0] >= 0 and pos[1] >= 0 and pos[0] < self.max_x and pos[1] < self.max_y

    def get_coordinates_in_range(self, from_pos, max_range):
        for i in range(-max_range, max_range + 1, 1):
            for j in range(-max_range, max_range + 1, 1):
                if i == 0 and j == 0:
                    continue
                pos = [from_pos[0] + i, from_pos[1] + j]
                if self.distance(pos, from_pos) <= max_range and self.fit(pos) and not self.is_obstable(pos):
                    yield pos

    @staticmethod
    def from_matrix2d(matrix2d, is_obstacle_cb):
        size_i = len(matrix2d)
        size_j = len(matrix2d[0])
        world = np.zeros([size_i, size_j])
        for i in range(size_i):
            for j in range(size_j):
                pos = [i, j]
                cell = matrix2d[i][j]
                if is_obstacle_cb(cell):
                    world[pos[0]][pos[1]] = CELL_VALUES['#']
                else:
                    world[pos[0]][pos[1]] = CELL_VALUES['.']
        return Sight_Bresenham(world, is_obstacle_cb)

if __name__ == "__main__":
    player_pos = [4, 41]
    s = Sight_Bresenham(string_to_world(WORLD_BIG), lambda cell: cell == CELL_VALUES["#"])
    start = timer()
    q = s.compute_sight(player_pos, 20)
    end = timer()
    print(f"{(end - start) * 1000}ms")
    s.display(q)